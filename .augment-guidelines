# Augment Guidelines for workers-packages

## Repository Overview

This is a monorepo containing Cloudflare Workers-related NPM packages and tooling. It uses pnpm workspaces, Turbo for build orchestration, and Changesets for versioning and publishing.

## Repository Structure

```
workers-packages/
├── packages/           # NPM packages (both published and internal)
├── examples/          # Example applications demonstrating package usage
├── .dagger/          # Dagger CI/CD configuration
└── turbo/            # Turbo generators and configuration
```

## Key Packages

### Published Packages

- **http-codex**: HTTP status codes library inspired by Go's http package
- **workers-tagged-logger**: Structured logging for Cloudflare Workers with AsyncLocalStorage
- **@jahands/cli-tools**: CLI utilities for commander-based applications
- **@jahands/dagger-helpers**: Dagger.io helpers for CI/CD pipelines
- **@jahands/typeid**: Bundled version of typeid-js for Workers compatibility
- **@jahands/otel-cf-workers**: Bundled OpenTelemetry for Cloudflare Workers

### Internal Packages

- **@repo/tools**: Internal CLI tools and build utilities
- **@repo/eslint-config**: Shared ESLint configurations
- **@repo/typescript-config**: Shared TypeScript configurations

## Development Workflow

### Package Management

- **Always use pnpm** for dependency management
- Use `pnpm install` for installing dependencies
- Use `pnpm add <package>` for adding new dependencies
- Use `syncpack` for managing dependency versions across packages

### Build System

- **Turbo** orchestrates builds and caching
- Run `turbo build` to build all packages
- Run `turbo check:ci` for comprehensive checks (lint, types, format, tests)
- Use `just` commands for common tasks (see Justfile)

### Testing

- **Vitest** with `@cloudflare/vitest-pool-workers` for Workers-compatible testing
- Run `pnpm test` or `just test` to run tests
- Tests require packages to be built first

### Code Quality

- **ESLint** with custom configurations for Workers
- **Prettier** for code formatting
- **TypeScript** for type checking
- Run `pnpm fix` or `just fix` to auto-fix issues

### Versioning and Publishing

- **Changesets** for version management
- Run `pnpm changeset:new` to create a new changeset
- Publishing is handled via `pnpm release` (builds, cleans, publishes)

## Development Guidelines

### Adding New Packages

1. Use Turbo generators: `turbo gen`
2. Follow existing package structure and naming conventions
3. Add appropriate scripts (build, check:lint, check:types, test)
4. Update workspace dependencies using syncpack patterns

### Code Standards

- Use TypeScript for all packages
- Follow existing ESLint configurations
- Include comprehensive tests for new functionality
- Document public APIs in README files

### Dependencies

- Pin TypeScript to version 5.5.4 (ESLint compatibility)
- Use `workspace:*` for internal package dependencies
- Keep dependency versions synchronized across packages using syncpack

### CI/CD

- Dagger handles CI/CD pipelines
- All checks must pass before merging
- Builds are cached using Turbo's remote cache

## Common Commands

```bash
# Development
just build          # Build all packages
just test           # Run tests
just fix            # Fix lint, format, deps
just check          # Run all checks

# Package management
pnpm install        # Install dependencies
pnpm fix:deps       # Fix dependency issues
pnpm check:deps     # Check dependency consistency

# Publishing
pnpm changeset:new  # Create new changeset
pnpm release        # Build and publish packages
```

## Important Notes

### Cloudflare Workers Compatibility

- Packages are designed for Cloudflare Workers runtime
- Use `nodejs_compat` or `nodejs_als` compatibility flags when needed
- Test with `@cloudflare/vitest-pool-workers` for Workers environment

### Monorepo Considerations

- Changes affecting multiple packages require careful coordination
- Use changesets to document breaking changes
- Consider impact on dependent packages when making changes

### Build Dependencies

- Some packages depend on others being built first
- Turbo handles build dependencies automatically
- Always build packages before running tests

## File Patterns to Understand

- `package.json`: Package configuration and dependencies
- `tsconfig.json`: TypeScript configuration (extends from @repo/typescript-config)
- `vitest.config.ts`: Test configuration for Vitest
- `CHANGELOG.md`: Auto-generated by changesets
- `.changeset/`: Contains changeset files for version management

## Markdown & Documentation

### Autoformatter Conflicts

- **Underscore escaping**: Autoformatters may escape underscores in filenames (e.g., `_.capmetro.tsx` becomes `\_.capmetro.tsx`), causing str_replace failures
- **Solution**: Format filenames the same way the autoformatter does - use escaped underscores `\_.filename.tsx` in markdown files to match autoformatter behavior

## Communication Style Requirements

**NEVER use these phrases:**

- "You're absolutely right!" / "Great question!" / "Excellent point!"
- "I understand your concern" / "That's a great observation"
- Any form of excessive agreement or validation

**ALWAYS:**

- Lead with the solution/answer first, explanation second
- Use code examples instead of lengthy explanations
- When user identifies an error: respond with "Yes, that's an error" or "Correct, that should be X"
- When user is mistaken: respond with "That's not correct because..." or "That won't work because..."
- State your preferred solution confidently even if user suggests something different
- Explain trade-offs briefly when multiple approaches exist
- Prioritize accuracy over agreeability
