---
description: How to align comments in typescript files
globs:
alwaysApply: true
---
# Style

Style guidelines for this repo.

## Comment Alignment - Formatting Inline Comments

### Context/Location
Applies to TypeScript, JavaScript, and other languages using `//` style comments where inline comments need visual alignment.

#### Key Rule
When auto-formatters require single space before `//`, align comments by adding spaces AFTER the `//` instead of before.

#### Pattern
Find the longest line in a group, then add spaces after `//` on shorter lines to align comment text:

```typescript
// Before:
'STRING', // text field
'MONTH_YEAR', // date with format YYYYMM

// After:
'STRING', //     text field
'MONTH_YEAR', // date with format YYYYMM
```

#### Implementation
- Use longest line as baseline
- Add spaces after `//`: count `(longest_line_length - current_line_length)`
- Apply consistently within each block

## Code Comment Guidelines

**Only add comments when they provide value beyond what the code itself communicates. Follow these principles:**

### DO comment:

- **Why** decisions were made, not **what** the code does
- Complex algorithms or non-obvious logic
- Workarounds, edge cases, or potential gotchas
- Business rules or domain-specific context
- TODO items or known limitations
- Function/class documentation (purpose, parameters, return values)
- Regular expressions or complex conditions that aren't self-evident

### DON'T comment:

- Simple variable assignments (`// Set user name to "John"` for `userName = "John"`)
- Obvious control flow (`// Loop through users` for `for (user in users)`)
- Self-documenting code (`// Increment counter` for `counter++`)
- Type information already clear from the code
- Restating what well-named functions do (`// Get user by ID` for `getUserById()`)

### Examples:

**Bad (redundant):**

```python
# Add 1 to count
count += 1

# Check if user is admin
if user.is_admin:
    # Grant access
    grant_access()
```

**Good (adds value):**

```python
# Compensate for zero-indexing in the UI display
count += 1

# Admin check required by compliance policy XYZ-123
if user.is_admin:
    grant_access()  # Bypasses the standard approval workflow
```

**Remember:** Good code with meaningful names often needs fewer comments. Strive to make your code self-documenting first, then add comments only where additional context genuinely helps future readers (including yourself).
