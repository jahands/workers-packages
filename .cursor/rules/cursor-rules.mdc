---
description: Cursor rule guidelines (ALWAYS read before adding/updating rules)
globs:
alwaysApply: false
---
<cursor-rules-guide>

<title>Cursor Rules - Organization and Format</title>

<location>
<description>All cursor rules should be placed in the `.cursor/rules/` directory with the `.mdc` extension.</description>

<requirements type="dont">
- `.cursorrules` file in the root (deprecated)
- Rules in other locations
- Rules with other extensions
</requirements>

<requirements type="do">
- `.cursor/rules/{descriptive-name}.mdc`
- One rule per file
- Clear, focused rules
</requirements>
</location>

<file-naming>
<requirements>
- Use kebab-case: `my-rule-name.mdc`
- Be descriptive but concise
- Group related rules with common prefixes
</requirements>

<examples>
- `github-actions-runners.mdc`
- `docker-compose.mdc`
- `development-workflow.mdc`
</examples>
</file-naming>

<frontmatter-requirement>
<critical>EVERY .mdc file MUST start with frontmatter - files without it won't work</critical>

<template>
```yaml
---
description: What this rule does (LLMs read this to decide relevance)
globs:
alwaysApply: false
---
```
</template>

<notes>
- description: Required - determines when LLMs read the rule
- globs: Keep empty for new rules
- alwaysApply: Keep false for new rules
</notes>
</frontmatter-requirement>

<rule-format>
<description>Rules must be written for LLM optimization. Prioritize machine readability over human readability.</description>

<critical>START WITH THE SIMPLEST STRUCTURE THAT CLEARLY CONVEYS YOUR RULE</critical>

<decision-tree>
Ask yourself:
1. Can I express this rule as a simple list of do's and don'ts? → Use simple template
2. Does this rule involve multiple interconnected concepts? → Consider complex template
3. Am I adding sections just because the template has them? → Remove those sections
4. Am I about to add a second example? → Stop. One is usually enough.

Remember: Empty sections add tokens but no value. Less structure often communicates more clearly.
</decision-tree>

<simplicity-first>
<principle>Start with the absolute minimum. You can always add more if truly needed.</principle>
<warning>If you're thinking "maybe I should add..." - DON'T. Only add what's essential.</warning>
<rule-of-thumb>If your simple rule exceeds 50 lines, you're probably over-structuring it.</rule-of-thumb>
</simplicity-first>

<rule-complexity-principle>
Use the minimum XML structure needed for clarity. Most rules only need:
- A title
- A list of requirements
- Maybe some examples

That's it. Don't add sections unless they add real value.
</rule-complexity-principle>

<simple-template>
<description>Use this template for 90% of rules - formatting, naming conventions, simple behaviors</description>
```yaml
---
description: Brief description for LLM rule selection
globs:
alwaysApply: false
---
```

```xml
<rule-name>

<title>Rule Title</title>

<rules>
- First requirement
- Second requirement  
- Third requirement
</rules>

<examples>
<example type="good">
```typescript
// Good code example
```
</example>
</examples>

</rule-name>
```

<stop-here>For most rules, you're done. Only add more sections if the rule is genuinely complex.</stop-here>

<example-guidelines>
<critical>ONE EXAMPLE IS USUALLY ENOUGH - Don't add more unless each shows a fundamentally different pattern</critical>
- Simple formatting rules: ONE concise example (<15 lines)
- If you're thinking "I should also show..." - DON'T
- Only add bad examples if the mistake is non-obvious
- Never show variations of the same concept
- Trust the LLM to generalize from one clear example
- Multiple examples are ONLY for rules with distinct subcategories
</example-guidelines>
</simple-template>

<complex-template>
<description>ONLY use this template for complex architectural patterns, multi-faceted systems, or rules requiring extensive context</description>
```yaml
---
description: Brief description for LLM rule selection
globs:
alwaysApply: false
---
```

```xml
<rule-name>

<title>Rule Title</title>

<context>
<applies-to>Where this rule applies</applies-to>
</context>

<overview>High-level explanation</overview>

<key-concepts>
- Important concept
- Another concept
</key-concepts>

<rules>
<rule>
<name>Rule name</name>
<requirements>
- Requirement
- Another requirement
</requirements>
</rule>
</rules>

<examples>
<example type="good">
```typescript
// Code
```
</example>
</examples>

</rule-name>
```
</complex-template>

<xml-tag-guidelines>

<formatting-rules>
- No markdown headers (#, ##, ###)
- No text formatting (**bold**, *italic*)
- No emojis or Unicode symbols
- No redundant labels
- Use attributes for categorization
- Consistent patterns throughout
- Exception: Use markdown code blocks (```)
- Exception: Use markdown tables for comparisons
- Exception: Use backticks for inline code, commands, and technical terms
- XML tags only
- Every section needs an XML tag
- Use dash lists within tags
- Consistent nesting
- Semantic names
- Lowercase with hyphens
- Attributes for metadata
- Specific over generic
- No redundant text
- No markdown formatting inside XML
- No visual elements
- No generic tags like section, div, content
- No human-oriented formatting
</formatting-rules>

<xml-benefits>
- Unambiguous parsing
- Explicit hierarchy
- Consistent extraction
- No formatting ambiguity
</xml-benefits>

<common-mistakes>
- Mixing markdown headers with XML tags
- Using XML tags for formatting
- Creating deeply nested structures (>4 levels)
- Inconsistent attribute naming
</common-mistakes>

<token-optimization>
- XML tag pair: ~2-3 tokens
- Dash list item: ~1 token
- Individual XML elements: ~4-5 tokens each
- Choose lists when >3 similar items
</token-optimization>

<list-patterns>
<pattern type="unordered">
<description>Use dash lists for most content</description>
```xml
<requirements>
- Each requirement is important
- Order doesn't matter
- Keep items concise
</requirements>
```
</pattern>

<pattern type="ordered">
<description>Use numbered lists only when order is critical</description>
```xml
<steps>
1. First do this
2. Then do that
3. Finally do this
</steps>
```
</pattern>

<pattern type="key-value">
<description>For type definitions, use consistent format</description>
```xml
<types>
- `feat:` - New feature or functionality
- `fix:` - Bug fix
- `chore:` - Maintenance tasks
</types>
```
</pattern>
</list-patterns>

<common-patterns>
<pattern>
<name>Lists save tokens vs individual tags</name>
```xml
<concepts>
- Concept one explanation
- Concept two explanation
- Concept three explanation
</concepts>
```
</pattern>

<pattern>
<name>Code examples with attributes</name>
```xml
<example type="good">
```typescript
// Code here
```
</example>
```
</pattern>

<pattern>
<name>Structured comparisons</name>
```xml
<comparison>
<before>Old approach</before>
<after>New approach</after>
</comparison>
```
</pattern>
</common-patterns>

<benefits>
- Unambiguous structure for parsing
- Clear data extraction paths
- Consistent patterns across all rules
- No markdown parsing required
- Explicit relationships between elements
- Optimal token usage
</benefits>

</xml-tag-guidelines>

<exceptions>

<tables>
<description>Use markdown tables for structured comparisons</description>
<when>
- Side-by-side comparisons
- Key-value mappings
- Migration guides
- Fixed column data
</when>
<example>
| Old API | New API |
| ------- | ------- |
| .foo()  | .bar()  |
</example>
</tables>

<code-blocks>
<description>Always use markdown code blocks</description>
<rationale>XML code tags are redundant when markdown provides syntax highlighting</rationale>
</code-blocks>
</exceptions>

<when-to-add-sections>
<section-guidelines>
- <context>: ONLY if scope is ambiguous or needs clarification
- <overview>: ONLY for complex multi-part systems
- <key-concepts>: ONLY if introducing new technical concepts
- <categories>: ONLY if organizing 10+ related items
- Multiple <rule> blocks: ONLY if rules have different contexts
- Multiple examples: ONLY if showing fundamentally different patterns
</section-guidelines>

<examples-of-overuse>
- Adding <context> for "all JavaScript files" (obvious from title)
- Adding <overview> to explain what indentation is
- Adding <key-concepts> for well-known terms
- Creating nested <rule> blocks for a simple list
</examples-of-overuse>
</when-to-add-sections>

<actual-examples>
<example type="simple-appropriate">
```xml
<indentation-standards>

<title>JavaScript/TypeScript Indentation</title>

<rules>
- Always use 2 spaces for indentation
- Never use tabs
- Configure editors to insert spaces for tab key
- Each nested level increases by 2 spaces
</rules>

<examples>
<example type="good">
```typescript
function example() {
  if (condition) {
    return true;
  }
}
```
</example>
</examples>

</indentation-standards>
```
</example>

<example type="even-simpler">
```xml
<skip-pleasantries>

<title>Skip Pleasantries in Responses</title>

<rules>
- Don't start responses with "Great question!", "You're right!", etc.
- Get straight to the answer
- Skip meta-commentary about the question
- Avoid filler phrases like "Let me help you with that"
</rules>

</skip-pleasantries>
```
<note>Notice: No examples needed when the rule is self-explanatory!</note>
</example>

<example type="complex-appropriate">
```xml
<dependency-injection>

<title>Dependency Injection in TypeScript</title>

<overview>Guidelines for implementing DI patterns, choosing injection types, and resolving circular dependencies in enterprise applications</overview>

<key-concepts>
- Inversion of Control (IoC)
- Constructor vs Property Injection  
- Circular dependency resolution
- DI container configuration
</key-concepts>

<!-- Multiple rule sections justified by different contexts -->
<rules>
<rule>
<name>Constructor Injection</name>
<requirements>
- Default approach for required dependencies
- Use readonly modifiers
- Inject interfaces, not implementations
</requirements>
</rule>

<rule>
<name>Circular Dependency Resolution</name>
<requirements>
- Detect cycles with compiler tools
- Extract shared interfaces
- Use lazy loading as last resort
</requirements>
</rule>
</rules>

<!-- Extensive examples justified by complexity -->
</dependency-injection>
```
</example>
</actual-examples>
</rule-format>

<best-practices>
- Optimize for LLM parsing
- Use XML structure exclusively
- Dash lists within tags
- Semantic tag names
- Consistent patterns
- Single-purpose rules
- Regular updates
- Remove obsolete rules
- No visual formatting
- Let tags convey meaning
</best-practices>

</cursor-rules-guide>
