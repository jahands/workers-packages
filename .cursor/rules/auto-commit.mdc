---
description: Read this when user asks you to auto commit as you go
globs:
alwaysApply: false
---
## Git Commit Guidelines

When making changes to code, commit your changes incrementally as you work. Follow these commit conventions:

### Commit Message Format
```
<type>: <subject>

<body>
```

### Types
- `feat:` - New feature or functionality
- `fix:` - Bug fix
- `chore:` - Maintenance tasks, dependency updates, configuration changes
- `docs:` - Documentation only changes
- `style:` - Code style/formatting changes (no functional changes)
- `refactor:` - Code restructuring without changing functionality
- `test:` - Adding or modifying tests
- `perf:` - Performance improvements

### Rules
1. **Subject line**:
   - Maximum 90 characters
   - Start with lowercase
   - No period at the end
   - Use imperative mood ("add" not "adds" or "added")

2. **Body** (optional):
   - Separate from subject with blank line
   - Wrap at 72 characters
   - Explain *what* and *why*, not *how*
   - Only include when the change requires context

3. **Commit frequency**:
   - Commit after each logical unit of change
   - Each commit should represent one coherent change
   - Don't bundle unrelated changes

### Examples

**Good:**
```
feat: add user authentication middleware

Implements JWT-based authentication for API routes.
Includes token validation and refresh logic.
```

```
fix: resolve null pointer in user lookup
```

```
chore: update dependencies to latest versions
```

**Bad:**
```
feat: added new feature to the application that allows users to authenticate using JWT tokens and also fixed some bugs and updated dependencies
```

```
fix: Fixed bug.
```

### Key Principles
- Be concise but descriptive
- One commit = one logical change
- Commit message should make sense without looking at the code
- Skip the body if the subject line is self-explanatory
